name: Deploy BlogBackend

on:
  push:
    branches:
      - main  # 你实际用的分支

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # 你的Node版本

      - name: Install dependencies
        run: npm install

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: ${{ secrets.TARGET_DIR }}
          strip_components: 0

      - name: Setup environment file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.TARGET_DIR }}
            
            # 删除旧的.env文件
            rm -f .env
            
            # 创建动态的start-with-env.js文件（包含环境变量）
            cat > start-with-env.js << 'EOF'
            #!/usr/bin/env node
            
            // 设置环境变量
            process.env.NODE_ENV = 'production';
            process.env.DB_DIALECT = 'mysql';
            process.env.DB_HOST = '${{ secrets.DB_HOST }}';
            process.env.DB_PORT = ${{ secrets.DB_PORT }};
            process.env.DB_NAME = '${{ secrets.DB_NAME }}';
            process.env.DB_USER = '${{ secrets.DB_USER }}';
            process.env.DB_PASSWORD = '${{ secrets.DB_PASSWORD }}';
            process.env.PORT = ${{ secrets.PORT }};
            process.env.JWT_SECRET = '${{ secrets.JWT_SECRET }}';
            process.env.JWT_EXPIRES_IN = '${{ secrets.JWT_EXPIRES_IN }}';
            process.env.CORS_ORIGIN = '${{ secrets.CORS_ORIGIN }}';
            
            // 启动应用
            require('./bin/www');
            EOF
            
            # 创建简化的ecosystem.config.js文件
            cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [{
                name: 'blog-backend',
                script: './start-with-env.js',
                instances: 1,
                autorestart: true,
                watch: false,
                max_memory_restart: '1G',
                error_file: './logs/err.log',
                out_file: './logs/out.log',
                log_file: './logs/combined.log',
                time: true
              }]
            };
            EOF
            
            echo "✅ 动态创建start-with-env.js和ecosystem.config.js完成"
            echo "📄 start-with-env.js 内容:"
            cat start-with-env.js
            echo ""
            echo "📄 ecosystem.config.js 内容:"
            cat ecosystem.config.js

      - name: Install production dependencies
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.TARGET_DIR }}
            echo "开始安装生产依赖..."
            npm install
            echo "依赖安装完成"

      - name: Restart PM2 service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.TARGET_DIR }}
            echo "重启PM2服务..."
            
            # 确保logs目录存在
            mkdir -p logs
            
            # 清理PM2进程列表
            pm2 kill
            
            # 检查ecosystem配置文件是否存在
            if [ ! -f "ecosystem.config.js" ]; then
              echo "❌ ecosystem.config.js 文件不存在"
              exit 1
            fi
            
            # 显示配置文件内容（调试用）
            echo "📄 ecosystem.config.js 内容:"
            cat ecosystem.config.js
            
            # 使用ecosystem配置文件启动服务
            pm2 start ecosystem.config.js --env production
            
            # 等待几秒让应用启动
            sleep 5
            
            # 显示PM2状态
            pm2 status
            
            # 检查环境变量
            echo "🔍 检查环境变量:"
            pm2 env 0
            
            # 如果启动失败，尝试备用方式
            if ! pm2 list | grep -q "blog-backend.*online"; then
              echo "⚠️ PM2启动失败，尝试备用启动方式..."
              pm2 kill
              pm2 start start-with-env.js --name blog-backend
              sleep 3
              pm2 status
            fi
            
            echo "PM2服务重启完成"
            echo "部署验证完成"
