// middleware/security.js - ÂÆâÂÖ®‰∏≠Èó¥‰ª∂
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const { fail } = require('../utils/response');

// ËØ∑Ê±ÇÈ¢ëÁéáÈôêÂà∂
const createRateLimit = (windowMs = 15 * 60 * 1000, max = 100, message = 'ËØ∑Ê±ÇËøá‰∫éÈ¢ëÁπÅÔºåËØ∑Á®çÂêéÂÜçËØï') => {
  return rateLimit({
    windowMs,
    max,
    message: { code: 429, message, data: null },
    standardHeaders: true,
    legacyHeaders: false,
    handler: (req, res) => {
      fail(res, message, 429);
    }
  });
};

// ÁôªÂΩïÈ¢ëÁéáÈôêÂà∂ - Êõ¥‰∏•Ê†º
const loginRateLimit = createRateLimit(
  15 * 60 * 1000, // 15ÂàÜÈíü
  5, // ÊúÄÂ§ö5Ê¨°Â∞ùËØï
  'ÁôªÂΩïÂ∞ùËØïËøá‰∫éÈ¢ëÁπÅÔºåËØ∑15ÂàÜÈíüÂêéÂÜçËØï'
);

// APIÈ¢ëÁéáÈôêÂà∂ - ‰∏ÄËà¨
const apiRateLimit = createRateLimit(
  15 * 60 * 1000, // 15ÂàÜÈíü
  100, // ÊúÄÂ§ö100Ê¨°ËØ∑Ê±Ç
  'APIËØ∑Ê±ÇËøá‰∫éÈ¢ëÁπÅÔºåËØ∑Á®çÂêéÂÜçËØï'
);

// ‰∏ä‰º†È¢ëÁéáÈôêÂà∂ - ‰∏•Ê†º
const uploadRateLimit = createRateLimit(
  60 * 1000, // 1ÂàÜÈíü
  10, // ÊúÄÂ§ö10Ê¨°‰∏ä‰º†
  '‰∏ä‰º†Ëøá‰∫éÈ¢ëÁπÅÔºåËØ∑Á®çÂêéÂÜçËØï'
);

// ËæìÂÖ•È™åËØÅ‰∏≠Èó¥‰ª∂
const validateInput = (schema) => {
  return (req, res, next) => {
    const { error } = schema.validate(req.body);
    if (error) {
      return fail(res, error.details[0].message, 400);
    }
    next();
  };
};

// SQLÊ≥®ÂÖ•Èò≤Êä§
const sanitizeInput = (req, res, next) => {
  const sanitize = (obj) => {
    if (typeof obj === 'string') {
      // ÁßªÈô§ÊΩúÂú®ÁöÑSQLÊ≥®ÂÖ•Â≠óÁ¨¶
      return obj.replace(/['"\\;]/g, '');
    }
    if (typeof obj === 'object' && obj !== null) {
      for (const key in obj) {
        obj[key] = sanitize(obj[key]);
      }
    }
    return obj;
  };

  if (req.body) {
    req.body = sanitize({ ...req.body });
  }
  if (req.query) {
    req.query = sanitize({ ...req.query });
  }
  if (req.params) {
    req.params = sanitize({ ...req.params });
  }

  next();
};

// XSSÈò≤Êä§
const xssProtection = (req, res, next) => {
  const escapeHtml = (str) => {
    if (typeof str !== 'string') return str;
    return str
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;');
  };

  const sanitizeObject = (obj) => {
    if (typeof obj === 'string') {
      return escapeHtml(obj);
    }
    if (typeof obj === 'object' && obj !== null) {
      for (const key in obj) {
        obj[key] = sanitizeObject(obj[key]);
      }
    }
    return obj;
  };

  if (req.body) {
    req.body = sanitizeObject({ ...req.body });
  }

  next();
};

// Êñá‰ª∂‰∏ä‰º†ÂÆâÂÖ®Ê£ÄÊü•
const fileUploadSecurity = (req, res, next) => {
  if (req.file) {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB

    if (!allowedTypes.includes(req.file.mimetype)) {
      return fail(res, '‰∏çÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûã', 400);
    }

    if (req.file.size > maxSize) {
      return fail(res, 'Êñá‰ª∂Â§ßÂ∞èË∂ÖËøáÈôêÂà∂(5MB)', 400);
    }

    // Ê£ÄÊü•Êñá‰ª∂Âêç
    const filename = req.file.originalname;
    if (!/^[a-zA-Z0-9._-]+$/.test(filename)) {
      return fail(res, 'Êñá‰ª∂ÂêçÂåÖÂê´ÈùûÊ≥ïÂ≠óÁ¨¶', 400);
    }
  }

  next();
};

// ËØ∑Ê±ÇÊó•Âøó‰∏≠Èó¥‰ª∂
const requestLogger = (req, res, next) => {
  const start = Date.now();
  
  // ËÆ∞ÂΩïËØ∑Ê±Ç‰ø°ÊÅØ
  console.log(`üìù ${new Date().toISOString()} - ${req.method} ${req.originalUrl} - IP: ${req.ip}`);
  
  // ËÆ∞ÂΩïÂìçÂ∫îÊó∂Èó¥
  res.on('finish', () => {
    const duration = Date.now() - start;
    console.log(`‚è±Ô∏è  ${req.method} ${req.originalUrl} - ${res.statusCode} - ${duration}ms`);
  });

  next();
};

// HelmetÂÆâÂÖ®Â§¥ÈÖçÁΩÆ
const securityHeaders = helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
  hsts: {
    maxAge: 31536000,
    includeSubDomains: true,
    preload: true
  }
});

module.exports = {
  loginRateLimit,
  apiRateLimit,
  uploadRateLimit,
  validateInput,
  sanitizeInput,
  xssProtection,
  fileUploadSecurity,
  requestLogger,
  securityHeaders,
  createRateLimit
};
